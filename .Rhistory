select(-ados) %>%
# arrange in long format
pivot_longer(-group,
names_to = 'protein',
values_to = 'level') %>%
# nest by protein
nest(data = c(level, group)) %>%
# compute t tests
mutate(ttest = map(data, test_fn)) %>%
unnest(ttest) %>%
# sort by p-value
arrange(p_value) %>%
# multiple testing correction
mutate(m = n(),
hm = log(m) + 1/(2*m) - digamma(1),
rank = row_number(),
p.adj = m*hm*p_value/rank)
ttests_out <- biomarker_train %>%
# drop ADOS score
select(-ados) %>%
# arrange in long format
pivot_longer(-group,
names_to = 'protein',
values_to = 'level') %>%
# nest by protein
nest(data = c(level, group)) %>%
# compute t tests
mutate(ttest = map(data, test_fn)) %>%
unnest(ttest) %>%
# sort by p-value
arrange(p_value) %>%
# multiple testing correction
mutate(m = n(),
hm = log(m) + 1/(2*m) - digamma(1),
rank = row_number(),
p.adj = m*hm*p_value/rank)
View(ttests_out)
# function to compute tests
test_fn <- function(.df){
t_test(.df,
formula = level ~ group,
order = c('ASD', 'TD'),
alternative = 'two-sided',
var.equal = F)
}
ttests_out <- biomarker_clean %>%
# drop ADOS score
select(-ados) %>%
# arrange in long format
pivot_longer(-group,
names_to = 'protein',
values_to = 'level') %>%
# nest by protein
nest(data = c(level, group)) %>%
# compute t tests
mutate(ttest = map(data, test_fn)) %>%
unnest(ttest) %>%
# sort by p-value
arrange(p_value) %>%
# multiple testing correction
mutate(m = n(),
hm = log(m) + 1/(2*m) - digamma(1),
rank = row_number(),
p.adj = m*hm*p_value/rank)
# Modification 1: Training Partition
set.seed(27)
biomarker_split <- initial_split(biomarker_clean, prop = 0.8)
biomarker_train <- training(biomarker_split)
biomarker_test <- testing(biomarker_split)
ttests_out <- biomarker_train %>%
# drop ADOS score
select(-ados) %>%
# arrange in long format
pivot_longer(-group,
names_to = 'protein',
values_to = 'level') %>%
# nest by protein
nest(data = c(level, group)) %>%
# compute t tests
mutate(ttest = map(data, test_fn)) %>%
unnest(ttest) %>%
# sort by p-value
arrange(p_value) %>%
# multiple testing correction
mutate(m = n(),
hm = log(m) + 1/(2*m) - digamma(1),
rank = row_number(),
p.adj = m*hm*p_value/rank)
# select significant proteins
proteins_s1 <- ttests_out %>%
slice_min(p.adj, n = 10) %>%
pull(protein)
# store predictors and response separately
predictors <- biomarker_train %>%
select(-c(group, ados))
response <- biomarker_train %>% pull(group) %>% factor()
# fit RF
rf_out <- randomForest(x = predictors,
y = response,
ntree = 1000,
importance = T)
# check errors
rf_out$confusion
# compute importance scores
proteins_s2 <- rf_out$importance %>%
as_tibble() %>%
mutate(protein = rownames(rf_out$importance)) %>%
slice_max(MeanDecreaseGini, n = 10) %>%
pull(protein)
# select subset of interest
proteins_sstar <- intersect(proteins_s1, proteins_s2)
biomarker_sstar <- biomarker_train %>%
select(group, any_of(proteins_sstar)) %>%
mutate(class = (group == 'ASD')) %>%
select(-group)
View(biomarker_sstar)
# fit logistic regression model
fit <- glm(class ~ .,
data = training(biomarker_sstar),
family = 'binomial')
# fit logistic regression model
fit <- glm(class ~ .,
data = biomarker_sstar,
family = 'binomial')
# evaluate errors on test set
class_metrics <- metric_set(sensitivity,
specificity,
accuracy,
roc_auc)
biomarker_sstar_test <- biomarker_test %>%
select(group, any_of(proteins_sstar)) %>%
mutate(class = (group == 'ASD')) %>%
select(-group)
View(biomarker_sstar_test)
biomarker_sstar_test %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
mod1_results <- biomarker_sstar_test %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
# function to compute tests
test_fn <- function(.df){
t_test(.df,
formula = level ~ group,
order = c('ASD', 'TD'),
alternative = 'two-sided',
var.equal = F)
}
ttests_out <- biomarker_clean %>%
# drop ADOS score
select(-ados) %>%
# arrange in long format
pivot_longer(-group,
names_to = 'protein',
values_to = 'level') %>%
# nest by protein
nest(data = c(level, group)) %>%
# compute t tests
mutate(ttest = map(data, test_fn)) %>%
unnest(ttest) %>%
# sort by p-value
arrange(p_value) %>%
# multiple testing correction
mutate(m = n(),
hm = log(m) + 1/(2*m) - digamma(1),
rank = row_number(),
p.adj = m*hm*p_value/rank)
# select significant proteins
proteins_s1 <- ttests_out %>%
slice_min(p.adj, n = 10) %>%
pull(protein)
# store predictors and response separately
predictors <- biomarker_clean %>%
select(-c(group, ados))
response <- biomarker_clean %>% pull(group) %>% factor()
# fit RF
set.seed(101422)
rf_out <- randomForest(x = predictors,
y = response,
ntree = 1000,
importance = T)
# check errors
rf_out$confusion
# compute importance scores
proteins_s2 <- rf_out$importance %>%
as_tibble() %>%
mutate(protein = rownames(rf_out$importance)) %>%
slice_max(MeanDecreaseGini, n = 10) %>%
pull(protein)
# select subset of interest
proteins_sstar <- intersect(proteins_s1, proteins_s2)
biomarker_sstar <- biomarker_clean %>%
select(group, any_of(proteins_sstar)) %>%
mutate(class = (group == 'ASD')) %>%
select(-group)
# partition into training and test set
set.seed(101422)
biomarker_split <- biomarker_sstar %>%
initial_split(prop = 0.8)
# fit logistic regression model to training set
fit <- glm(class ~ .,
data = training(biomarker_split),
family = 'binomial')
# evaluate errors on test set
class_metrics <- metric_set(sensitivity,
specificity,
accuracy,
roc_auc)
unmod1_results <- testing(biomarker_split) %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
unmod1_results
mod1_results
results <- testing(biomarker_split) %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
# function to compute tests
test_fn <- function(.df){
t_test(.df,
formula = level ~ group,
order = c('ASD', 'TD'),
alternative = 'two-sided',
var.equal = F)
}
ttests_out <- biomarker_clean %>%
# drop ADOS score
select(-ados) %>%
# arrange in long format
pivot_longer(-group,
names_to = 'protein',
values_to = 'level') %>%
# nest by protein
nest(data = c(level, group)) %>%
# compute t tests
mutate(ttest = map(data, test_fn)) %>%
unnest(ttest) %>%
# sort by p-value
arrange(p_value) %>%
# multiple testing correction
mutate(m = n(),
hm = log(m) + 1/(2*m) - digamma(1),
rank = row_number(),
p.adj = m*hm*p_value/rank)
# select significant proteins
proteins_s1 <- ttests_out %>%
slice_min(p.adj, n = 10) %>%
pull(protein)
# store predictors and response separately
predictors <- biomarker_clean %>%
select(-c(group, ados))
response <- biomarker_clean %>% pull(group) %>% factor()
# fit RF
set.seed(101422)
rf_out <- randomForest(x = predictors,
y = response,
ntree = 1000,
importance = T)
# check errors
rf_out$confusion
# compute importance scores
proteins_s2 <- rf_out$importance %>%
as_tibble() %>%
mutate(protein = rownames(rf_out$importance)) %>%
slice_max(MeanDecreaseGini, n = 10) %>%
pull(protein)
# select subset of interest
proteins_sstar <- intersect(proteins_s1, proteins_s2)
biomarker_sstar <- biomarker_clean %>%
select(group, any_of(proteins_sstar)) %>%
mutate(class = (group == 'ASD')) %>%
select(-group)
# partition into training and test set
set.seed(101422)
biomarker_split <- biomarker_sstar %>%
initial_split(prop = 0.8)
# fit logistic regression model to training set
fit <- glm(class ~ .,
data = training(biomarker_split),
family = 'binomial')
# evaluate errors on test set
class_metrics <- metric_set(sensitivity,
specificity,
accuracy,
roc_auc)
results <- testing(biomarker_split) %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
results
results
mod1_results
results
library(tidyverse)
library(infer)
library(randomForest)
library(tidymodels)
library(modelr)
library(yardstick)
load('data/biomarker-clean.RData')
# function to compute tests
test_fn <- function(.df){
t_test(.df,
formula = level ~ group,
order = c('ASD', 'TD'),
alternative = 'two-sided',
var.equal = F)
}
ttests_out <- biomarker_clean %>%
# drop ADOS score
select(-ados) %>%
# arrange in long format
pivot_longer(-group,
names_to = 'protein',
values_to = 'level') %>%
# nest by protein
nest(data = c(level, group)) %>%
# compute t tests
mutate(ttest = map(data, test_fn)) %>%
unnest(ttest) %>%
# sort by p-value
arrange(p_value) %>%
# multiple testing correction
mutate(m = n(),
hm = log(m) + 1/(2*m) - digamma(1),
rank = row_number(),
p.adj = m*hm*p_value/rank)
# select significant proteins
proteins_s1 <- ttests_out %>%
slice_min(p.adj, n = 20) %>%
pull(protein)
# store predictors and response separately
predictors <- biomarker_clean %>%
select(-c(group, ados))
response <- biomarker_clean %>% pull(group) %>% factor()
# fit RF
set.seed(101422)
rf_out <- randomForest(x = predictors,
y = response,
ntree = 1000,
importance = T)
# check errors
rf_out$confusion
# compute importance scores
proteins_s2 <- rf_out$importance %>%
as_tibble() %>%
mutate(protein = rownames(rf_out$importance)) %>%
slice_max(MeanDecreaseGini, n = 20) %>%
pull(protein)
# select subset of interest
proteins_sstar <- intersect(proteins_s1, proteins_s2)
biomarker_sstar <- biomarker_clean %>%
select(group, any_of(proteins_sstar)) %>%
mutate(class = (group == 'ASD')) %>%
select(-group)
# partition into training and test set
set.seed(101422)
biomarker_split <- biomarker_sstar %>%
initial_split(prop = 0.8)
# fit logistic regression model to training set
fit <- glm(class ~ .,
data = training(biomarker_split),
family = 'binomial')
# evaluate errors on test set
class_metrics <- metric_set(sensitivity,
specificity,
accuracy,
roc_auc)
results <- testing(biomarker_split) %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
# partition into training and test set
set.seed(101422)
testing(biomarker_split) %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
# partition into training and test set
set.seed(101422)
testing(biomarker_split) %>%
add_predictions(fit, type = 'response') %>%
mutate(est = as.factor(pred > 0.5), tr_c = as.factor(class)) %>%
class_metrics(estimate = est,
truth = tr_c, pred,
event_level = 'second')
?intersect
?fuzzy_thresholding
?`fuzzy matching`
?intersect
library(tidyverse)
library(infer)
library(randomForest)
library(tidymodels)
library(modelr)
library(yardstick)
load('data/biomarker-clean.RData')
View(biomarker_clean)
# load any other packages and read data here
library(tidyverse)
library(ggplot2)
library(tidyr)
library(dplyr)
data <- read.csv("biomarker-raw.csv")
var_names <- read_csv('biomarker-raw.csv',
col_names = F,
show_col_types = F,
n_max = 2,
col_select = -(1:2)) %>%
t() %>%
as_tibble() %>%
rename(name = V1,
abbreviation = V2) %>%
na.omit()
trim <- function(x, .at){
x[abs(x) > .at] <- sign(x[abs(x) > .at])*.at
return(x)
}
biomarker_clean <- read_csv('biomarker-raw.csv',
skip = 2,
show_col_types = F,
col_select = -2L,
col_names = c('group',
'empty',
pull(var_names, abbreviation),
'ados'),
na = c('-', '')) %>%
filter(!is.na(group)) %>%
mutate(across(.cols = -c(group, ados),
~ trim(scale(log10(.x))[, 1], .at = 3))) %>%
select(group, ados, everything())
# Select a subset of columns for proteins (skip the first two columns)
protein_columns <- colnames(data)[3:length(colnames(data))]
# Randomly select 5 protein columns
set.seed(123) # Set seed for reproducibility
selected_proteins <- sample(protein_columns, 5)
# Convert selected columns to numeric and handle any issues with non-numeric data
data[selected_proteins] <- lapply(data[selected_proteins], function(x) as.numeric(as.character(x)))
# Filter to keep only rows without NA values in selected proteins
protein_data <- data %>% select(all_of(selected_proteins)) %>% drop_na()
# Reshape data for ggplot
protein_data_long <- protein_data %>%
pivot_longer(cols = everything(), names_to = "Protein", values_to = "Raw_Value") %>%
mutate(Raw_Value = as.numeric(Raw_Value))  # Ensure Raw_Value is numeric
# Plot distributions using ggplot2
ggplot(protein_data_long, aes(x = Raw_Value)) +
geom_histogram(bins = 20, fill = "skyblue", color = "black") +
facet_wrap(~ Protein, scales = "free_x") +
labs(title = "Distribution of Raw Values for Selected Proteins",
x = "Raw Value", y = "Frequency") +
theme_minimal()
sampled_proteins <- biomarker_clean %>%
select(sample(names(.), 5)) %>%
pivot_longer(cols = everything(), names_to = "Protein", values_to = "Transformed_Value")
# Plot histograms for each selected protein using facet_wrap (Transformed Values)
ggplot(sampled_proteins, aes(x = Transformed_Value)) +
geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black") +
facet_wrap(~ Protein, scales = "free") +
labs(title = "Histograms of Transformed Values for Selected Proteins",
x = "Transformed Value",
y = "Frequency") +
theme_minimal()
# load any other packages and read data here
library(tidyverse)
library(ggplot2)
library(tidyr)
library(dplyr)
data <- read.csv("biomarker-raw.csv")
var_names <- read_csv('biomarker-raw.csv',
col_names = F,
show_col_types = F,
n_max = 2,
col_select = -(1:2)) %>%
t() %>%
as_tibble() %>%
rename(name = V1,
abbreviation = V2) %>%
na.omit()
trim <- function(x, .at){
x[abs(x) > .at] <- sign(x[abs(x) > .at])*.at
return(x)
}
biomarker_clean <- read_csv('biomarker-raw.csv',
skip = 2,
show_col_types = F,
col_select = -2L,
col_names = c('group',
'empty',
pull(var_names, abbreviation),
'ados'),
na = c('-', '')) %>%
filter(!is.na(group)) %>%
mutate(across(.cols = -c(group, ados),
~ trim(scale(log10(.x))[, 1], .at = 3))) %>%
select(group, ados, everything())
